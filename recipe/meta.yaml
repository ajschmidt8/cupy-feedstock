{% set name = "cupy" %}
{% set version = "8.6.0" %}
{% set sha256 = "f3ed02ba18e38b4f3ed2c324fa08967e6714f59357ccb0b28badd9572e77500b" %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  - url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz
    sha256: {{ sha256 }}

build:
  number: 0
  skip: true  # [(not win64 and not linux64) or cuda_compiler_version in (undefined, "None")]
  script:
    # CuPy default detects CUDA from nvcc, but on Conda-Forge's dockers nvcc lives in a different place...
    # With conda-forge/nvcc-feedstock#58, CUDA_PATH is set correctly
    - export NVCC=$(which nvcc)                                                  # [linux64]
    - echo "nvcc is $NVCC, CUDA path is $CUDA_PATH"                              # [linux64]
    - for /f "tokens=* usebackq" %%f in (`where nvcc`) do (set "NVCC=%%f:\=\\")  # [win]
    - echo "nvcc is %NVCC%, CUDA path is %CUDA_PATH%"                            # [win]

    - {{ PYTHON }} -m pip install . --no-deps -vv

    # copy activate/deactivate scripts
    - mkdir -p "${PREFIX}/etc/conda/activate.d"                                               # [linux64]
    - cp "${RECIPE_DIR}/activate.sh" "${PREFIX}/etc/conda/activate.d/cupy_activate.sh"        # [linux64]
    - mkdir -p "${PREFIX}/etc/conda/deactivate.d"                                             # [linux64]
    - cp "${RECIPE_DIR}/deactivate.sh" "${PREFIX}/etc/conda/deactivate.d/cupy_deactivate.sh"  # [linux64]
    - if not exist %PREFIX%\etc\conda\activate.d mkdir %PREFIX%\etc\conda\activate.d          # [win]
    - copy %RECIPE_DIR%\activate.bat %PREFIX%\etc\conda\activate.d\cupy_activate.bat          # [win]
    - if not exist %PREFIX%\etc\conda\deactivate.d mkdir %PREFIX%\etc\conda\deactivate.d      # [win]
    - copy %RECIPE_DIR%\deactivate.bat %PREFIX%\etc\conda\deactivate.d\cupy_deactivate.bat    # [win]

    # enable CuPy's preload mechanism
    - mkdir -p "${SP_DIR}/cupy/.data/"                                                                                     # [linux64]
    - cp ${RECIPE_DIR}/preload_config/linux64_cuda{{ cuda_compiler_version }}_wheel.json ${SP_DIR}/cupy/.data/_wheel.json  # [linux64]
    - if not exist %SP_DIR%\cupy\.data mkdir %SP_DIR%\cupy\.data                                                           # [win]
    - copy %RECIPE_DIR%\preload_config\win64_cuda{{ cuda_compiler_version }}_wheel.json %SP_DIR%\cupy\.data\_wheel.json    # [win]
  missing_dso_whitelist:
    - '*/libcuda.*'  # [linux64]
  ignore_run_exports_from:
    - cudnn
    - nccl  # [linux64]
    - cutensor

requirements:
  build:
    - {{ compiler("c") }}
    - {{ compiler("cxx") }}
    - {{ compiler("cuda") }}
    - sysroot_linux-64 2.17  # [linux64 and cdt_name == "cos7"]

  host:
    - python
    - pip
    - setuptools
    - cython >=0.29.22,<3
    - fastrlock >=0.3
    - cudnn
    - nccl  # [linux64]
    - cutensor  # [win or cdt_name == "cos7"]

  run:
    - python
    - setuptools
    - fastrlock >=0.3
    - numpy >=1.16

  run_constrained:
    # Only GLIBC_2.17 or older symbols present
    - __glibc >=2.17      # [linux64 and cdt_name == "cos7"]
    - scipy >=1.3
    - optuna >=2
    - {{ pin_compatible('cudnn') }}
    - {{ pin_compatible('nccl') }}  # [linux64]
    - {{ pin_compatible('cutensor') }}

test:
  requires:
    - pytest
    - mock
    - {{ compiler("c") }}
    - {{ compiler("cxx") }}
    - {{ compiler("cuda") }}  # tests need nvcc
    #- scipy >=1.0,<1.1  <-- cause error

  source_files:
    - tests

about:
  home: https://cupy.dev/
  license: MIT
  license_family: MIT
  license_file: LICENSE
  summary: CuPy is an implementation of a NumPy-compatible multi-dimensional array on CUDA.
  dev_url: https://github.com/cupy/cupy/
  doc_url: https://docs.cupy.dev/en/stable/

extra:
  recipe-maintainers:
    - jakirkham
    - leofang
    - kmaehashi
    - asi1024
    - emcastillo
    - toslunar
